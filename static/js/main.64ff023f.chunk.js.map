{"version":3,"sources":["listOfTasks.js","quotes.js","App.js","serviceWorker.js","index.js"],"names":["Tasks","state","line","strikethrough","_this","setState","_this2","this","react_default","a","createElement","value","props","index","className","onClick","taskData","Button_default","deleteTask","variant","Component","Quotes","currentQuotes","currentAuthor","App","newTask","allTheToDoList","quotes","quoteAuthor","myNewTask","submitForm","event","preventDefault","newTaskToDo","copy","slice","push","localStorage","setItem","updateForm","currentTask","target","splice","Object","defineProperty","deleteAllTasks","clear","axios","method","url","then","response","data","quoteText","catch","error","console","log","getItem","split","JSON","stringify","getQute","_this3","listofToDoList","map","task","listOfTasks","rel","type","href","Container_default","onSubmit","InputGroup_default","FormControl_default","placeholder","aria-label","aria-describedby","name","onChange","Append","Navbar_default","Toggle","Collapse","Text","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64ff023f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\n\nclass Tasks extends Component {\n  state ={\n      line: 'false'\n  }\n\n\n  strikethrough = () =>{\n    if(this.state.line === 'false'){\n    this.setState({line: 'strikethrough'});\n    } else{\n     this.setState({line: 'false'});\n    }\n    }\n    render() { \n       \n    return (\n      <div>\n       <ul>\n        <li value = {this.props.index} className = {this.state.line} >\n        <span onClick = {this.strikethrough}>{this.props.taskData} </span>\n        <Button onClick = {() => this.props.deleteTask(this.props.index)} variant=\"light\" >❌</Button></li>\n        </ul> \n       </div> \n    );\n  }\n}\n\nexport default Tasks;","import React, { Component } from 'react';\nimport './App.css';\n\nclass Quotes extends Component {\n    render() {\n        return(\n            <div className = \"quotesCopm\">\n            <p className = \"qouites\"> ❝ {this.props.currentQuotes}❞</p>\n            <p className = \"author\">{this.props.currentAuthor}</p>\n            </div>\n        )\n    }\n}\n\nexport default Quotes; ","import React, { Component } from 'react';\nimport './App.css';\nimport Tasks from './listOfTasks';\nimport axios from 'axios';\nimport Quotes from './quotes'\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Navbar from 'react-bootstrap/Navbar'\n\n\n// Add a new item to the list -done-\n// Mark the item as complete -done-\n// Stretch Goals\n\n// Remove an item from the list -done- \n// Make To Do List responsive -semi responsive-\n// Clear all items -done-\n// Clear only completed items\n// Save data to localstorage or API --\n// Use 3rd party API with Axios -done-\n// Use a 3rd party library\n\n\nclass App extends Component {\n \n  state = {\n    //this is for the task input\n    newTask: '',\n    allTheToDoList: [],\n    quotes: '',\n    quoteAuthor: '',\n    myNewTask: []\n}\n\n\n//This function for the submit button\nsubmitForm = (event) => {\n  event.preventDefault() //to stop the page from refreach when the user click the button\n  const newTaskToDo = this.state.newTask ;\n    //Check if the input is not empty\n  if(newTaskToDo !== '') {\n       //Take a copy from the allTheToDoList array because i cant change the original array\n        const copy = this.state.allTheToDoList.slice(0)\n        //Use PUSH function to add the value to the array\n        copy.push(newTaskToDo)\n        // localStorage.setItem('items', JSON.stringify(copy));\n        //const data = JSON.parse(localStorage.getItem('items'));\n        // Update the state \n        this.setState({\n         allTheToDoList:copy,\n         newTask:'',\n         myNewTask:copy\n      })\n      localStorage.setItem('task',copy);\n    }\n    }\n    \n    getQute(){\n\n      axios(\n        {\n          method: 'get',\n          url: 'https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en'\n        }\n      ).then(response => {\n        // console.log(response.data.quoteAuthor)\n        this.setState({\n          quotes: response.data.quoteText,\n          quoteAuthor: response.data.quoteAuthor \n        })\n      }).catch(error => {\n        console.log(error)\n      })\n    }\n // Declare localstorage\n componentDidMount(){\n // Declare locale\n //var aValue = storage.getItem(keyName);\n    if(!localStorage.getItem(\"task\")){\n      localStorage.setItem('task', JSON.stringify(this.state.allTheToDoList));\n    } else {\n      this.setState({\n        allTheToDoList: localStorage.getItem('task').split(\",\")\n      });\n  \n    }\n\n\n    console.log(localStorage.getItem('task'))\n  \n\n    this.getQute()\n    \n    \n }\n\n\n//for the input field \nupdateForm = (event) =>{\n  // let copy=this.state.myNewTask.slice(0);\n  // let newTask = event.target.value;\n  // copy.push(newTask);\n  // this.setState({myNewTask: copy,\n  //   newTask: event.target.value\n  // })\n\n//Get the input value\nlet currentTask = event.target.value;\n//Update the localStorage value storage.setItem(keyName, keyValue);\nlocalStorage.setItem(\"task\", currentTask);\n//Set the state to the new value\nthis.setState({newTask: currentTask})\n\n \n}\n\ndeleteTask = (index) => {\n  // Copy current list of items and using splice function to delete the current index\n   const copy = this.state.allTheToDoList.splice(index,1)\n   this.setState({ newTask: copy,\n    newTask:'' });\n\n  }\n\n\ndeleteAllTasks = (event) => {\n  //Make a copy from the array\n  const copy = this.state.allTheToDoList;\n  localStorage.clear()\n   //Using splice function to delete all the content of the array\n  copy.splice(0)\n    this.setState({\n      allTheToDoList: copy \n    });\n}\n\n\n\n\n  render() {\n    const listofToDoList = this.state.allTheToDoList.map((task,index) => <Tasks taskData = {task} index={index} deleteTask = {this.deleteTask}/>);\n\n    return (\n      <div> \n      <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/draft-js/0.7.0/Draft.min.css\"/>\n       <h1>To Do List</h1>\n       <Container className = \"container\">\n       <form onSubmit = {this.submitForm}>\n       <InputGroup>\n    <FormControl className = \"inputTask\"\n      placeholder=\"What are you doing today;)\"\n      aria-label=\"Recipient's username\"\n      aria-describedby=\"basic-addon2\"\n      type=\"text\" name = \"task\" onChange ={this.updateForm} value = {this.state.newTask}\n    /><InputGroup.Append>\n      <Button type = \"submit\" variant=\"light\" >ADD</Button>\n      <Button variant=\"light\" onClick = {this.deleteAllTasks}>CLEAR</Button>\n    </InputGroup.Append>\n  </InputGroup>\n       {/* <input type=\"text\" name = \"task\" placeholder = \"What are you doing today;)\" onChange ={this.updateForm} value = {this.state.newTask}/>\n       <Button type = \"submit\" variant=\"light\">ADD</Button> <Button className = \"clearButton\" onClick = {this.deleteAllTasks} variant=\"light\">CLEAR</Button> */}\n       </form>\n       <h3> My To Do List 💡</h3>\n       {listofToDoList}\n       </Container> \n       <Quotes \n       currentQuotes = {this.state.quotes}\n       currentAuthor = {this.state.quoteAuthor}/>\n{/*      Made with 💞 and alot of ☕\n */}\n <Navbar>\n  <Navbar.Toggle />\n  <Navbar.Collapse className=\"justify-content-end\">\n    <Navbar.Text>\n    Fajr Saleh - Made with 💞 and a lot of ☕\n    </Navbar.Text>\n  </Navbar.Collapse>\n</Navbar>\n    </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}